@startuml
Class NetworkHandler {
String location
String lastReturnedMessage
void recieveRequest()
void returnMessage(Message m)
void reconnect()
void setLocaiton(String loc)
String getLocation()
String getLast()
}
Class Cart {
HashMap<Integer, Integer> items
void addItem(int i)
void updateQuantity(Item i, int q)
void setDiscountCode(DiscountCode d)
void updateTotal()
void getCost()
void saveCartToDisk()
int numItems()
HashMap<Integer, Integer> getItems()
}
enum RequestType{
ViewCart
AddItem
ApplyDiscount
ModifyQuantity
}
Class DiscountCode {
double rate
void applyCode(double c)
double getRate()
}
Class Cost {
double cost
void updateTotal(Cart c)
double getTaxedAmount(String location)
double getDiscountedAmount()
double getCost()
void setDiscountCode(DiscountCode d)
}
Class Tax{
interface Algorithm
Map createAlgorithms()
HashMap<String, Tax> algorithms
double applyTax(String location, double cost)
}
Class Item{
int id
String name
String description
double price
String picture
double markOffRate
int getIdentifier()
String getName()
String getDescription()
double getPrice()
String getPicture()
double getMarkOffRate()
}
Class Message{
String m
String getMessage()
}
Class Stock{
HashMap<Integer, Integer> inventory
HashMap<Integer, Item> itemList
boolean adjustStock(int i, int differential)
void addItemToStock(Item i, int q)
HashMap<Integer, Integer> getInventory()
void clearInventory()
HashMap<Integer, Item> getItemList()
}
Class Request{
String [] data
RequestType type
}

Cart->"*"Item
NetworkHandler..>Message
Stock..>Item
Cart->Cost
Cost->DiscountCode
Cost..>Tax
NetworkHandler-->Cart
NetworkHandler..>Request
Request-->RequestType
@enduml